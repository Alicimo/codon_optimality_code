#!/usr/bin/env python

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats as stats
from subprocess import check_call, STDOUT
import Bio, get_pdb_fold, get_tAI, csands_folds_reader, os, sys, random, itertools, re, scipy, math, scoring

######################################################
#VARIABLES
######################################################

#CSandS database to use
csands_file = 'csands_folds_xray_40.txt'

#Reading frame database
rframe_file = 'csands_folds_xray_90.txt'

#location of databases
databases = '/local/databases/'

#excluded species
excluded_species = 'excluded_species_tRNA_40.csv'

#excluded folds
excluded_folds = 'excluded_folds_40_min_7.csv'

#window size to use for smoothing
window_size = 3

#minimum size of family
min_group = 7

#use to make the alignments be repeated or use those from a previous run
#==> if none found they will be automatically done
alignment_switch = 0

#thresholds for defining codons optimality
high_thresh = 0.9
low_thresh = 0.1

print "\nInput file:",csands_file
print "Database directory:",databases
print "Excluded species:",excluded_species
print "Excluded folds:",excluded_folds
print "Reading frames:",rframe_file
print "Window size:", window_size
print "Minimum group size:",min_group
print "Alignment switch:",alignment_switch
print "High cut threshold:",high_thresh
print "Low cut threshold:",low_thresh,'\n'

home = os.path.expanduser("~")
databases = home + databases
csands_file = databases + csands_file
excluded_species = databases + excluded_species
excluded_folds = databases + excluded_folds
rframe_file = databases + rframe_file

######################################################
#INIT DATA STRUCTS, GET DATA & COUNT FOLDS
######################################################

org_count = dict()
speed_scores = dict()
speed_high = dict()
speed_low = dict()

if not os.path.exists('plots/'):
	os.makedirs('plots')

data = csands_folds_reader.get_data(csands_file)
data = csands_folds_reader.filter_species(data,excluded_species)
data,folds,fold_count = csands_folds_reader.filter_min_family(data,min_group,excluded_folds)

print "\nTotal folds:",sum(fold_count.values())
print "Fold types:",len(folds),'\n'

######################################################
#GET ORGANISM SPECIFIC SCORES AND OPTIMALITY THRESHOLDS
######################################################

organisms = [datum.organism for datum in data]
for org in organisms:
	speed_scores[org] = get_tAI.get_tAI(datum.organism,databases)
speed_low,speed_high = scoring.get_optimality_thresholds(organisms,speed_scores,window_size,low_thresh,high_thresh,rframe_file)

######################################################
#MAIN LOOP
######################################################

for iteration,fold in enumerate(folds):

	print fold,':\t',iteration+1,"\tout of\t",len(folds)

	#extract specific fold data
	fold_data = csands_folds_reader.filter_fold(data,fold)	

	#structural alignment
	alignments,protein_seq,flag = MAMMOTHmult.structural_alignment(fold_data,fold,databases)
	if flag:
		continue

	#mRNA
	rna_seq = mRNA.get_mRNA(fold_data,speed_scores)
	aligned_rna = mRNA.align_mRNA(protein_seq,rna_seq)

	#organisms
	organisms = []
	for datum in fold_data:
		for pfold in datum.protein_domain_fold:
			if pfold == fold:
				organisms.append(datum.organism)
		
	#speed profiling
	speed_profiles = score_rna_multiple(aligned_rnas,organisms,scores)


########################################################
#Analysis
########################################################


	codon_classes = []	
	for speed,org in zip(speed_profiles,organisms):

		#generate randomized data and get distribution stats
#		copy_data = copy.deepcopy( speed_profile )
#		random_data = []
#		for i in xrange(10000):
#			random.shuffle(test_case)
#			random_data.extend( smoothAll(test_case,3) )
#		random_data = [x for x in random_data if x is not None]
#		mean = np.mean(np.array(data))
#		sigma = np.std(data)
#		low_limit = mean - 1.96*sigma
#		high_limit = mean + 1.96*sigma
#		n,bins,patches = plt.hist(data,25,range=(0,1),normed=1)
#		plt.show()
	
		codon_class = []
		for i in xrange(len(speed)):
			if not speed[i]:
				codon_class.append('-')
			elif speed[i] <= speed_low[org]:
				codon_class.append(-1)
			elif speed[i] >= speed_high[org]:
				codon_class.append(1)
			else:
				codon_class.append(0)
		codon_classes.append(codon_class)


	#calculate conservation score:
	conservation_score = []
	for i in xrange(len(codon_classes[-1])):
		n = 0
		count = 0
		for j in xrange(len(codon_classes)):
			if codon_classes[j][i] != '-':
					count += codon_classes[j][i]
					n += 1
		if n > 4:
			conservation_score.append( count / (1.*n) )	


	#randomize data
	duplicate_data =  [x for x in codon_classes]
	random_scores = []
	for i in xrange(10000):
		for j in xrange(len(duplicate_data)):
			random.shuffle(duplicate_data[j])
		for j in xrange(len(duplicate_data[0])):
			n = 0
			count = 0
			for k in xrange(len(duplicate_data)):
				if duplicate_data[k][j] != '-':
					count += duplicate_data[k][j]
					n += 1
			if n > 4:
				random_scores.append( count / (1. * n) )

	random_scores.sort()
	high_cut = random_scores[int(39*len(random_scores)/40.)]
	low_cut = random_scores[int(len(random_scores)/40.)]

	count = 0
	for score in conservation_score:
		if score <= low_cut or score >= high_cut:
			count += 1
	
	if iteration == 0:
		if count > 0.05*len(conservation_score):
			sig_conserved = 1
			print "Fold is under selection pressure"
		else:
			sig_conserved = 0
	else:
		if count > 0.05*len(conservation_score):
			sig_conserved += 1
			print "Fold is under selection pressure"


	plt.figure()
	n, bins, patches = plt.hist([random_scores,conservation_score],11,range=(-1,1),color=['0.75','crimson'],normed=1)
	plt.bar(bins[1:]-(bins[1]-bins[0])/2 - 1./25/2, n[0]-n[1] , 1./25)
	plt.legend(['Random','Observed (N='+str(len([a for a in conservation_score if a]))+')','Difference'],'upper left'  )
	plt.title('Distrubrution of scores - '+fold)
	plt.xlabel('Conservation Score')
	plt.ylabel('Relative Frequency')
	plt.axvline(x=low_cut,ls='--',color='k',lw=3)
	plt.axvline(x=high_cut,ls='--',color='k',lw=3)
	plt.savefig('plots/conservation_score_'+fold+'.png')

	if iteration == 0:
		cumulative = [n[0]-n[1]]
	else:
		cumulative.append(n[0]-n[1])

print "Folds under selection pressure: ",sig_conserved


import pickle
pickle.dump( cumulative, open( "plots/cumulative.p", "wb" ) )

totals = np.sum(cumulative,axis=0)
std = np.std(cumulative,axis=0)

plt.figure()
plt.bar(bins[1:]-(bins[1]-bins[0])/2 - 2./11/2, totals,
	width=2./11, yerr=std, color='0.75')
plt.title('Distrubrution of scores - Total')
plt.xlabel('Conservation Score')
plt.ylabel('Relative Frequency')
plt.savefig('plots/conservation_score_total.png')


		
		
