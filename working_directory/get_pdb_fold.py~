#!/usr/bin/env python
#
# Downloads pdb files and extracts the specified residues (fold region) from a specific 
# chain. Returns the path to the fold file.

import Bio.PDB, get_pdb, os, sys

#class that defines the residues that are succesfully pass through the filter at saving
class Selector(Bio.PDB.Select):
 
	def __init__(self, chain_letter, res_ranges):
		self.chain_letter = chain_letter
		self.res_ranges = res_ranges
	
	#use the first model 
	#==> CSandS should be filtered to use only xray structures so this is a minimal problem
	def accept_model(self, model):
		return (model.get_id() == 0)

	def accept_chain(self, chain):
		return (chain.get_id() in self.chain_letter)

	def accept_residue(self, residue):
		#residue must be in the range specified
		if residue.get_id()[1] in range(self.res_ranges[0],self.res_ranges[1]+1):
			#residue must not be variable and must have a alpha carbon (MAMMOTHmult uses CA to perform structural alignment)
			if residue.get_id()[0] == ' ' and residue.get_id()[2] == ' ' and residue.has_id('CA'):
				return  True
		return False	
	
#extract the sequence of a pdb file 
#NOTE: this is neccesry due to inconsistencies between the CSandS entries and pdb files
def get_pdb_seq(pdb_id,fname,res_range):

	#get pdb info
	s = Bio.PDB.PDBParser().get_structure(pdb_id,fname)
	ids = [res.get_id()[1] for res in s.get_residues()] # get residue ids
	seq = [Bio.PDB.Polypeptide.three_to_one(res.get_resname()) for res in s.get_residues()] #get residues
	#NOTE: residues may be missing from the structure, and hence res ids may have missing intergers.
	#--> this is NOT accomadated when the sequence is extracted
	#--> hence we must map the sequence back onto the ids to establish any gaps

	#sanity check
	if len(ids) != len(seq):
		print "Error 1: mismatch between ids and seq",pdb_id
		print "File:",fname 
		print "Length of ids",len(ids)
		print "Length of seq",len(seq)
		print ids,'\n'
		print seq
		sys.exit()

	#map onto domain range given:
	seg = ''
	count = 0
	for i in xrange(res_range[0],res_range[1]+1):
		if count != len(seq) and ids[count] == i :
			seg += seq[count]
			count += 1
		else:
			seg += '-'
	return seg

#save a domain of a pdb structure
def save_pdb_fold(pdb_id,gname,chain,res_ranges):
	io=Bio.PDB.PDBIO()
	s=Bio.PDB.PDBParser().get_structure(pdb_id,gname)
	io.set_structure(s)
	io.save(fname, select=Selector(chain, res_ranges)) #Selector (see above) defines which residues to save
	return


def get_pdb_fold(fold,pdb_id,chain,res_ranges,databases):

	fname = databases+'/pdb_fold_segments/'+fold+'/'+pdb_id+'_'+chain+'_'+str(res_ranges[0])+'_'+str(res_ranges[1])+'.pdb'

	#check if fold is present

	#if yes -->  extract the domain sequence
	if os.path.exists(fname):
		seq = get_pdb_seq(pdb_id,fname,res_ranges)

	#if no --> download pdb, extract fold and save it
	else:
		#check for specific fold dir
		if not os.path.exists(databases+'/pdb_fold_segments/'+fold+'/'):
			os.makedirs('pdb_fold/'+fold+'/')

		#download (or get location of) pdb file
		gname = get_pdb.get_pdb(pdb_id,databases)

		#save fold segment to fname
		save_pdb_fold(pdb_id,gname,chain,res_ranges)
	
		seq = get_pdb_seq(pdb_id,fname,res_ranges)

	#return file name and domain sequence
	return fname,seq

def structural_alignment(data,fold,databases)

